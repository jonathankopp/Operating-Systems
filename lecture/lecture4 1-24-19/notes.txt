+-----------+
| Lecture 4 |
+-----------+

A process is a "running program" or "program in execution"

Processes have a variety of states:


			RUNNING								READY										WAITING (on I/O)
			 STATE								STATE										 STATE

	   +------+												  ???<==P8 	+-----------------------------+
	   |      |					 +--------------------    |                             |
		 | CPU  |   <====  | P3 | P5 | P2 | etc.    |     I/O subsystem           |
		 | P12  |          +--------------------    |                             |
		 +------+																		+-----------------------------+

		RUNNING STATE: process is actively using the CPU
									 (i.e., executing/running its instructions)

	  READY STATE: process is ready to use the CPU
								 (i.e., idly waiting in the Ready Queue)

		WAITING STATE: process is waiting for the I/O operation(s) to complete

CPU Scheduling (a.k.a. Short-Term Scheduling)

-- The scheduling system enables one process to use the CPU
		while other processes are wiaiting in the ready queue to
			use the CPU (or some are wiating for I/O)

-- The goals of CPU scheduling are to make the efficient use of the CPU
		and to minimize the turnaround and wait times for each running process

		-- we also want to achieve "fairness" among all processes
				to the extent possible

-- The job of the CPU Scheduler is, when the CPU becomes free,
		to select the next process from the ready queue

-- CPU Scheduling Algorithms:

	 First Come First Served (FCFS)

	 Shortest Job First (SJF)

	 Shortest Remaining Time (SRT)

	 Priority Scheduling (some jobs have a higher priority and they always get scheduled first)

	 Round Robin (RR)


#############################################

	 fork-interleaving.c example (from fork.c in lecture3)

			
												[PARENT/ORIGINAL PROCESS]
											/														\
										 /														 \
										/														    \
									 /													    	 \
								[PARENT]														[CHILD]
								after fork()...											after fork()...
								PARENT: my child process ID is ##		CHILD: happy birthday!
								All done!														All done!

							<the above two sets of outpus can interleave with one another,
									but the relative orders of each ar axactly as shown>

-- PID 1 is the zombie killer
	
		If the Parent finishes first the Child becomes a zombie and will output sometime later in the terminal after the user
			regains control


						 \                                          /
						  \                                        /
							 \                                      /
								\                                    /
					<after the wait() or waitpid() call in the PARENT>

													[PARENT] All done!
